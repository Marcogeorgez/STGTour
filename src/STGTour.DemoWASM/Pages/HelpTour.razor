@using GTour.Components
@page "/help/tour"

<h2>Guided Tour Component</h2>

<p>
    The Guided Tour component is the main visual component that displays a tour on the page.
    Multiple tours can be registered as long as they have unique Id's. The GTour component
    inherits from a base component that in turn implements an interface to ease development and extensibility.
</p>

<h3>Adding a Tour</h3>

<p>
    To add a tour to a razor page, import the namespace if not globally imported and
    add the component to the page. Below is an example of all the properties available
    on the tour component.
    The Arrow Element details can be found on the respective help page. The child content
    holds the tour steps and can be found on the respective page.
<br/>
<br/>

<pre>
    <code class="language-html">

@("<GuidedTour TourId=\"Tour1\" OverlayClass=\"overlay-class\" CloseOnOverlayClick=\"true\" ")
            HighlightClass="my-highlight-class" HighlightEnabled="true" TourWrapperClass="tour-wrapper-class"
            ArrowClass="my-arrow-class" OverlayEnabled="true" ShowArrow="true"
            OnTourCanceled="@@((tour) => {})" OnTourCompleted="@@((tour) => {})"
            OnTourStarted="@@((tour) => {})" OnTourStepRegistered="@@((tourStep) => {})"
            OnTourStepDeRegistered="@@((tourStep) => {})">
@("     <ArrowContent>")
@("         ...")
@("     </ArrowContent>")
@("     <ChildContent>")
@("         ...")
@("     </ChildContent>")
@("</GuidedTour>")
    </code>
</pre>

<br/>
<br/>
    <h3>Properties</h3>
    <ul>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">TourId*</span>
                <span class="font-style-italic">The unique identifier of the tour.</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">ArrowClass</span>
                <span class="font-style-italic">An override class name to style the arrow</span>
            </div>
        </li>
         <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">CloseOnOverlayClick</span>
                <span class="font-style-italic">A value to indicate if the tour should be stopped when clicking on the overlay</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">HighlightClass</span>
                <span class="font-style-italic">A class to be appended to a Tour Step Element that is "Focused".</span>
            </div>
        </li>
         <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">HighlightEnabled</span>
                <span class="font-style-italic">A value to indicate if the highlight class should be appended to the focused element</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">OverlayClass</span>
                <span class="font-style-italic">An additional class to append to the overlay</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">OverlayEnabled</span>
                <span class="font-style-italic">A value indicating if the overlay is enabled for the tour</span>
            </div>
        </li>
         <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">ShowArrow</span>
                <span class="font-style-italic">A value to indicate if the arrow should be rendered for the tour component</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">TourWrapperClass</span>
                <span class="font-style-italic">An additional class to be appended to the root tour element</span>
            </div>
        </li>
    </ul>

    <h3>Callbacks</h3>

    <ul>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">OnTourCanceled</span>
                <span class="font-style-italic">A callback for when the tour is canceled</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">OnTourCompleted</span>
                <span class="font-style-italic">A callback for when the tour is completed</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">OnTourStarted</span>
                <span class="font-style-italic">A callback for when the tour has started</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">OnTourStepRegistered</span>
                <span class="font-style-italic">A callback for when a child tour step has been registered</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">OnTourStepDeRegistered</span>
                <span class="font-style-italic">A callback for when a child tour step has been deregistered</span>
            </div>
        </li>
    </ul>

</p>

@code {
    [Inject]
    private GTour.Abstractions.IGTourService GTourService { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        await JSRuntime.InvokeVoidAsync("higlightCode");
    }
   
}
