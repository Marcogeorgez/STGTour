@using GTour.Components
@implements IDisposable

<GuidedTour TourId="noArrow" OverlayEnabled="true" CloseOnOverlayClick="true" ShowArrow="false">
    <GuidedTourStep StepName="step1" TourStepSequence="1" ElementSelector="[data-no-arrow]">
        <span>I have the no arrow</span>
    </GuidedTourStep>
</GuidedTour>

<GuidedTour TourId="defaultArrow" OverlayEnabled="true" CloseOnOverlayClick="true">
    <GuidedTourStep StepName="step1" TourStepSequence="1" ElementSelector="[data-default-arrow]">
        <span>I have the default arrow</span>
    </GuidedTourStep>
</GuidedTour>

<GuidedTour TourId="iconArrow" OverlayEnabled="true" CloseOnOverlayClick="true">
    <ArrowContent>
        <i class="my-arrow bi bi-caret-up-fill" data-popper-arrow></i>
    </ArrowContent>
    <ChildContent>
        <GuidedTourStep StepName="step1" TourStepSequence="1" ElementSelector="[data-icon-arrow]">
            <span>I have a custom bootstrap icon</span>
        </GuidedTourStep>
    </ChildContent>
</GuidedTour>


<h2>Arrows</h2>

<p>
    An arrow indicator has been included on the Tour Steps. It looks ugly yeah but the 
    arrow should rather be an icon element or not show at all. So this is how you do it.
</p>

<h3>No Arrow</h3>

<div data-no-arrow>
    <p>To turn of the Arrow Element rendering, set the Show Arrow Element on the guided tour</p>
</div>
<button class="btn btn-primary" @onclick="@(() => GTourService.StartTour("noArrow"))">View No Arrow</button>
<br/>
<br/>
<pre>
    <code style="language-html">
        @("<GuidedTour TourId=\"DefaultTheme\" OverlayEnabled=\"true\" ShowArrow=\"false\">")
@(" ....") 
@("</GuidedTour>") 
    </code>
</pre>

<h3>Default Arrow Style</h3>

<div data-default-arrow>
    <p>
        This is the default style applied to the arrow and can be overwritten by either overwriting the classes or setting the ArrowClass property
        on the Guided Tour.
    </p>
</div>
<button class="btn btn-primary" @onclick="@(() => GTourService.StartTour("defaultArrow"))">Default Arrow</button>
<br/>
<br/>
<pre>
    <code style="language-html">
  .arrow, .arrow::before {
    position: absolute;
    width: 8px;
    height: 8px;
    background: inherit;
  }

  .arrow {
    visibility: hidden;

    &.force-hide::before {
      visibility: hidden !important;
    }
  }

  .arrow::before {
    background: white;
    visibility: visible;
    content: '';
    transform: rotate(45deg);

    &.force-hide {
      visibility: hidden !important;
    }
  }

    </code>
</pre>

<pre>
    <code style="language-html">
        @("<GuidedTour TourId=\"DefaultTheme\" OverlayEnabled=\"true\" ArrowClass=\"myArrowClass\">")
@(" ....") 
@("</GuidedTour>") 
    </code>
</pre>

<h3>Custom Icon</h3>

<div data-icon-arrow>
    <p>
        This is the prefered method of showing the arrow element. Take not of the data attribute <b>data-popper-arrow</b>. This
        allows popperJs to pick up the arrow element and position it accordingly. In the below sample a bootstrap icon is
        used as the arrow element. This is accompanied with a style to rotate the icon element.
    </p>
</div>
<button class="btn btn-primary" @onclick="@(() => GTourService.StartTour("iconArrow"))">Icon Arrow</button>
<br/>
<br/>
<pre>
    <code style="language-html">
        @("<GuidedTour TourId=\"DefaultTheme\" OverlayEnabled=\"true\" ArrowClass=\"myArrowClass\">")
@("<ArrowContent>")
@("<i class=\"my-arrow bi bi-caret-up-fill\" data-popper-arrow></i>")
@("</ArrowContent>")
@(" ....") 
@("</GuidedTour>") 
    </code>
</pre>

<pre>
    <code>
    .guided-tour-wrapper[data-popper-placement^='top'] > .my-arrow {
      bottom: -16px;
      transform: rotate(180deg) !important;
    }

    .guided-tour-wrapper[data-popper-placement^='bottom'] > .my-arrow {
      top: -12px;
    }

    .guided-tour-wrapper[data-popper-placement^='left'] > .my-arrow {
      right: -12px;
      transform: rotate(90deg) !important;
    }

    .guided-tour-wrapper[data-popper-placement^='right'] > .my-arrow {
      left: -12px;
      transform: rotate(-90deg) !important;
    }
    </code>
</pre>

@code {
    [Inject]
    private GTour.Abstractions.IGTourService GTourService { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GTourService.OnTourRegistered += OnTourRegistered;
    }

    private void OnTourRegistered(GTour.Abstractions.IGTourService sender, GTour.Abstractions.IGTour tour)
    {
        Console.WriteLine($"Tour with name {tour.TourId} registered");
    }

    public void Dispose()
    {
        GTourService.OnTourRegistered -= OnTourRegistered;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        GTour.GTourService.Theme = new GTour.Themes.Default();
        base.OnAfterRender(firstRender);
        await JSRuntime.InvokeVoidAsync("higlightCode");
    }



}