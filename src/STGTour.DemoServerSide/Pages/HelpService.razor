@using GTour.Components

@page "/help/service"

<h2>GTour Service</h2>

<p>
    The GTourService is registered as a singleton service and can only 
    have one active tour started at any time. When the StartTour method
    is called while there is an existing tour active, the first tour will be stopped first.
    Depending on what step the tour is on, this can be either TourCompleted or TourCanceled. 
    If the tour is on the last step the TourCompleted will be called, if not the TourCanceled will be
    called. The service is registered in the DI Container on startup. See the example below to register the service.
</p>

<pre>
    <code class="language-cs">
        public void ConfigureServices(IServiceCollection services)
        {
            ...
            services.UseGTour();
            ...
        }
    </code>
</pre>

<h2>Methods</h2>

<p>

    The GTourService has the following methods available and the tour can be controlled from this point. This
    is especially helpful when navigating from custom content in the tour steps.

    <ul>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">RegisterTour(Abstractions.IGTour gTour)</span>
                <span class="font-style-italic">This is called internally and will automatically be called once a tour is included on a razor page.</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">StartTour(string tourId, string startStepName = default)</span>
                <span class="font-style-italic">Tries to start a tour with the given name and optionally the first step of the tour</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">StartTour(Abstractions.IGTour gTour, string startStepName = default)</span>
                <span class="font-style-italic">Tries to start a tour with the interface reference and optionally the first step of the tour</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">StopTour()</span>
                <span class="font-style-italic">Stops the currently active tour. If the Tour is on the last step, the tour will be completed. If not it will be canceled</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">CancelTour()</span>
                <span class="font-style-italic">Cancels the current active tour</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">PreviousStep()</span>
                <span class="font-style-italic">Navigates to the previous step in the active tour if there is a step prior</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">GoToStep(string stepName)</span>
                <span class="font-style-italic">Navigates to the step if it exists</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">CompleteTour()</span>
                <span class="font-style-italic">Completes the tour</span>
            </div>
        </li>
        <li>
            <div class="d-flex flex-column">
                <span class="font-weight-bold">DeRegisterTour(Abstractions.IGTour gTour)</span>
                <span class="font-style-italic">This is called internally and will automatically be called once a tour component is disposed.</span>
            </div>
        </li>
    </ul>
</p>

<pre>
    <code class="language-html">
        @(" <GuidedTour ...>")
@(" <GuidedTourStep ...>")
@("     <ChildContent ...>")
        ...
@("     </ChildContent>")
@("     <FooterContent>")
            ...
@("         <button class=\"btn\" @onclick=\"@(() => GTourService.CompleteTour())\">Complete</button>")    
@("     </FooterContent>")
@(" </GuidedTourStep>")
@("</GuidedTour>")
    </code>

    <code class="language-cs">

    ...

    [Inject]
    private GTour.Abstractions.IGTourService GTourService { get; set; }

    private async Task StartTour() 
    {
        ...
        await GTourService.StartTour("TourName", "startAtStep");    
        ...
    }
    </code>
</pre>

<h2>Events</h2>

<p>

    The GTourService has a few events that can be used to help drive the tour as well as assist in logging output.

    <ul>
        <li><span class="font-weight-bold">OnTourRegistered</span></li>
        <li><span class="font-weight-bold">OnTourDeRegistered</span></li>
        <li><span class="font-weight-bold">OnTourStarting</span></li>
        <li><span class="font-weight-bold">OnTourStarted</span></li>
        <li><span class="font-weight-bold">OnTourCanceled</span></li>
        <li><span class="font-weight-bold">OnTourCompleted</span></li>
    </ul>
</p>

<pre>
    <code class="language-cs">
   
    @@implements IDisposable
    
    ...

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GTourService.OnTourRegistered += OnTourRegistered;
    }

    private void OnTourRegistered(GTour.Abstractions.IGTourService sender, GTour.Abstractions.IGTour tour)
    {
        Console.WriteLine($"Tour with name {tour.TourId} registered");
    }

    public void Dispose()
    {
        GTourService.OnTourRegistered -= OnTourRegistered;
    }

    </code>
</pre>

@code {

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        await JSRuntime.InvokeVoidAsync("higlightCode");
    }

}
