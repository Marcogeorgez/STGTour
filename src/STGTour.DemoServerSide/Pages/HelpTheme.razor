@using GTour.Components

@page "/help/theme"

<h2>Theming</h2>

<GuidedTour TourId="NoTheme" OverlayEnabled="true">
    <GuidedTourStep Title="I Have No Theme" StepName="step1" TourStepSequence="1" ElementSelector="[data-no-theme]">
      <span>Look Mah, no styles</span>
    </GuidedTourStep>
</GuidedTour>

<GuidedTour TourId="BootstrapTheme" OverlayEnabled="true">
    <GuidedTourStep Title="I Have a BS theme" StepName="step1" TourStepSequence="1" ElementSelector="[data-bootstrap-theme]">
      <span>Look at all the BS</span>
    </GuidedTourStep>
</GuidedTour>

<GuidedTour TourId="DefaultTheme" OverlayEnabled="true">
    <GuidedTourStep Title="I Have a BS theme" StepName="step1" TourStepSequence="1" ElementSelector="[data-default-theme]">
      <span>I'm a pretty little princess</span>
    </GuidedTourStep>
</GuidedTour>

<p>
    The ST Gtour package comes with 3 built in themes. It also allows for custom themes to be built.
</p>

<h3>Pre-built Themes</h3>

<button class="btn btn-primary" @onclick="StartNoThemeTour">View None Theme</button>
<button class="btn btn-primary" @onclick="StartDefaultThemeTour">View Default Theme</button>
<button class="btn btn-primary" @onclick="StartBootstrapThemeTour">View Bootstrap Theme</button>

<div style="width: fit-content;">
    <ul class="list-group list-group-flush">
        <li class="list-group-item"><div data-no-theme>None - This will apply a blank theme to the component and all styles should be set.</div></li>
        <li class="list-group-item"><div data-default-theme>Default - This is the default built in theme.</div></li>
        <li class="list-group-item"><div data-bootstrap-theme>Bootstrap - Bootstrap classes are used for the theme.</div></li>
    </ul>
</div>

<h3>Adding a Custom Theme</h3>

<p>Create a new theme class and inherit from the GTour.Abstractions.ITheme. Implement the class names to use. Below is an example of the Bootstrap implementation.</p>

<pre>
    <code class="language-cs">
        public class MyOwnCustomTheme : GTour.Abstractions.ITheme
        {
            public string GTourOverlay { get; set; }
            public string GTourWrapper { get; set; }
            public string GTourArrow { get; set; }
            public string GTourStepWrapper { get; set; } = "modal-content ";
            public string GTourStepHeaderWrapper { get; set; } = "modal-header ";
            public string GTourStepContentWrapper { get; set; } = "modal-body ";
            public string GTourStepFooterWrapper { get; set; } = "modal-footer ";
            public string GTourStepHeaderTitle { get; set; } = "modal-title ";
            public string GTourStepCancelButton { get; set; } = "btn btn-warning ";
            public string GTourStepPreviousButton { get; set; } = "btn btn-secondary ";
            public string GTourStepNextButton { get; set; } = "btn btn-primary ";
            public string GTourStepCompleteButton { get; set; } = "btn btn-success ";
        }
    </code>
</pre>


<h3>Setting the theme in Startup.cs</h3>

<pre>
    <code class="language-cs">
        public void ConfigureServices(IServiceCollection services)
        {
            ...
            services.UseGTour();
            GTourService.Theme = new GTour.Themes.Bootstrap(); // Or Custom Theme
            ...
        }
    </code>
</pre>

<h3>Highlight Element</h3>

<p>
    A highlight class is appended to an element for the current tour step. There is a default supplied and
    to use this, you should include the styles in the host file. The style name is .element-highlight
    and can also be overwritten with a custom style.
</p>

<pre>
    <code class="language-html">
        @("<link rel='stylesheet' href='_content/GTour/css/styles.css' />")
    </code>
</pre>

<pre>
    <code class="language-css">
    .element-highlight {
        border: solid 2px #008aff;
        z-index: 9;
        position: relative;
        background-color: white;
      }
    </code>
</pre>


@code {
  [Inject]
  private GTour.Abstractions.IGTourService GTourService { get; set; }

  private async Task StartBootstrapThemeTour()
  {
      GTour.GTourService.Theme = new GTour.Themes.Bootstrap();
      await GTourService.StartTour("BootstrapTheme");
  }

  private async Task StartNoThemeTour()
  {
      GTour.GTourService.Theme = new GTour.Themes.None();
      await GTourService.StartTour("NoTheme");
  }

  private async Task StartDefaultThemeTour()
  {
      GTour.GTourService.Theme = new GTour.Themes.Default();
      await GTourService.StartTour("DefaultTheme");
  }

}
